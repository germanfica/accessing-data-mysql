package com.germanfica.accessingdatamysql.controller;

import com.germanfica.accessingdatamysql.domain.manytomany.Book;
import com.germanfica.accessingdatamysql.domain.manytomany.Like;
import com.germanfica.accessingdatamysql.domain.onetomany.Department;
import com.germanfica.accessingdatamysql.domain.onetomany.Employee;
import com.germanfica.accessingdatamysql.domain.manytomany.User;
import com.germanfica.accessingdatamysql.embeddable.LikeId;
import com.germanfica.accessingdatamysql.repository.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    // == fields ==
    private UserRepository userRepository;
    private BookRepository bookRepository;
    private DepartmentRepository departmentRepository;
    private EmployeeRepository employeeRepository;
    private LikeRepository likeRepository;

    // == constructors ==
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private MainController(UserRepository userRepository,
                           BookRepository bookRepository,
                           DepartmentRepository departmentRepository,
                           EmployeeRepository employeeRepository,
                           LikeRepository likeRepository
    ) {
        this.userRepository = userRepository;
        this.bookRepository = bookRepository;
        this.departmentRepository = departmentRepository;
        this.employeeRepository = employeeRepository;
        this.likeRepository = likeRepository;
    }

    // == request methods ==
    // curl localhost:8080/demo/add -d name=First -d email=someemail@someemailprovider.com
    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addUser (@RequestParam String name, @RequestParam String email){
        User n = new User();
        n.setName(name);
        n.setEmail(email);

        Book b = new Book();
        b.setName("Clean Code");
        b.setAuthor("Robert Cecil Martin");

        Like l = new Like();
        l.setId(new LikeId(n.getId(),b.getId()));
        //l.setPk(new LikePK(n,b));
        //l.setId(new LikePK(n,b));
        l.setName("asda");
        l.setUser(n);
        l.setBook(b);

        userRepository.save(n); // Save the user in the database
        bookRepository.save(b); // Save the book in the database
        likeRepository.save(l); // Save the like in the database

        return "Saved";
    }

    // curl localhost:8080/demo/addDepartment -d name='Computer Science'
    @PostMapping(path="/addDepartment") // Map ONLY POST Requests
    public @ResponseBody String addDepartment (@RequestParam String name){
        Department department = new Department();
        department.setName(name);

        departmentRepository.save(department);

        return "Saved";
    }

    // curl localhost:8080/demo/addEmployee -d name='Lucas' -d departmentId=1
    @PostMapping(path="/addEmployee") // Map ONLY POST Requests
    public @ResponseBody String addEmployee (@RequestParam String name, @RequestParam int departmentId){
        Employee employee = new Employee();
        employee.setName(name);
        employee.setDepartment(departmentRepository.findById(departmentId).get());

        employeeRepository.save(employee);

        return "Saved";
    }

    // curl 'localhost:8080/demo/allUsers'
    @GetMapping(path="/allUsers")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    // curl 'localhost:8080/demo/allDepartments'
    @GetMapping(path="/allDepartments")
    public @ResponseBody Iterable<Department> getAllDepartments() {
        // This returns a JSON or XML with the users
        return departmentRepository.findAll();
    }

    // curl 'localhost:8080/demo/allEmployees'
    @GetMapping(path="/allEmployees")
    public @ResponseBody Iterable<Employee> getAllEmployees() {
        // This returns a JSON or XML with the users
        return employeeRepository.findAll();
    }

    // curl localhost:8080/demo/likeBook -d userId=1 -d bookId=1
    @PostMapping(path="/likeBook") // Map ONLY POST Requests
    public @ResponseBody String likeBook (@RequestParam int userId, @RequestParam int bookId){
        User n = userRepository.findById(userId).get();
        Book b = bookRepository.findById(bookId).get();

        // Like
        Like l = new Like();
        l.setId(new LikeId(n.getId(),b.getId()));
        l.setName("holaa");
        l.setUser(n);
        l.setBook(b);

        likeRepository.save(l); // Save the like in the database

        return "Saved";
    }

}
